{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL || 'https://your-project.supabase.co';\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY || 'your-anon-key';\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Ring image utilities\nexport const getRingImageUrl = async (metal, design, shape, carat) => {\n  try {\n    // First try to get from database\n    const {\n      data,\n      error\n    } = await supabase.from('ring_images').select('image_url').eq('metal', metal).eq('design', design).eq('diamond_shape', shape).eq('carat', carat).single();\n    if (data && data.image_url) {\n      return data.image_url;\n    }\n\n    // Fallback: construct path manually\n    const imagePath = `/rings/${metal}/${design}/${shape}/weight-${carat}.png`;\n    const {\n      data: storageData\n    } = await supabase.storage.from('ring-images').getPublicUrl(imagePath);\n    return storageData.publicUrl;\n  } catch (error) {\n    console.error('Error fetching ring image:', error);\n    return '/placeholder-ring.png';\n  }\n};\n\n// Get progressive ring image (for partial selections)\nexport const getProgressiveRingImage = async selections => {\n  const {\n    metal,\n    design,\n    shape,\n    carat\n  } = selections;\n\n  // Try to find the best matching image based on what's selected\n  if (metal && design && shape && carat) {\n    return await getRingImageUrl(metal, design, shape, carat);\n  } else if (metal && design && shape) {\n    // Use default carat (1.0)\n    return await getRingImageUrl(metal, design, shape, '1.0');\n  } else if (metal && design) {\n    // Use default shape and carat\n    return await getRingImageUrl(metal, design, 'round', '1.0');\n  } else if (metal) {\n    // Use default design, shape, and carat\n    return await getRingImageUrl(metal, 'solitaire', 'round', '1.0');\n  }\n  return '/placeholder-ring.png';\n};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","supabase","getRingImageUrl","metal","design","shape","carat","data","error","from","select","eq","single","image_url","imagePath","storageData","storage","getPublicUrl","publicUrl","console","getProgressiveRingImage","selections"],"sources":["C:/Users/test/Desktop/FinalRingsStore/client/src/lib/supabase.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL || 'https://your-project.supabase.co';\r\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY || 'your-anon-key';\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n\r\n// Ring image utilities\r\nexport const getRingImageUrl = async (metal, design, shape, carat) => {\r\n  try {\r\n    // First try to get from database\r\n    const { data, error } = await supabase\r\n      .from('ring_images')\r\n      .select('image_url')\r\n      .eq('metal', metal)\r\n      .eq('design', design)\r\n      .eq('diamond_shape', shape)\r\n      .eq('carat', carat)\r\n      .single();\r\n\r\n    if (data && data.image_url) {\r\n      return data.image_url;\r\n    }\r\n\r\n    // Fallback: construct path manually\r\n    const imagePath = `/rings/${metal}/${design}/${shape}/weight-${carat}.png`;\r\n    const { data: storageData } = await supabase.storage\r\n      .from('ring-images')\r\n      .getPublicUrl(imagePath);\r\n\r\n    return storageData.publicUrl;\r\n  } catch (error) {\r\n    console.error('Error fetching ring image:', error);\r\n    return '/placeholder-ring.png';\r\n  }\r\n};\r\n\r\n// Get progressive ring image (for partial selections)\r\nexport const getProgressiveRingImage = async (selections) => {\r\n  const { metal, design, shape, carat } = selections;\r\n  \r\n  // Try to find the best matching image based on what's selected\r\n  if (metal && design && shape && carat) {\r\n    return await getRingImageUrl(metal, design, shape, carat);\r\n  } else if (metal && design && shape) {\r\n    // Use default carat (1.0)\r\n    return await getRingImageUrl(metal, design, shape, '1.0');\r\n  } else if (metal && design) {\r\n    // Use default shape and carat\r\n    return await getRingImageUrl(metal, design, 'round', '1.0');\r\n  } else if (metal) {\r\n    // Use default design, shape, and carat\r\n    return await getRingImageUrl(metal, 'solitaire', 'round', '1.0');\r\n  }\r\n  \r\n  return '/placeholder-ring.png';\r\n}; "],"mappings":"AAAA,SAASA,YAAY,QAAQ,uBAAuB;AAEpD,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,kCAAkC;AAC5F,MAAMC,eAAe,GAAGH,OAAO,CAACC,GAAG,CAACG,2BAA2B,IAAI,eAAe;AAElF,OAAO,MAAMC,QAAQ,GAAGP,YAAY,CAACC,WAAW,EAAEI,eAAe,CAAC;;AAElE;AACA,OAAO,MAAMG,eAAe,GAAG,MAAAA,CAAOC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAEC,KAAK,KAAK;EACpE,IAAI;IACF;IACA,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMP,QAAQ,CACnCQ,IAAI,CAAC,aAAa,CAAC,CACnBC,MAAM,CAAC,WAAW,CAAC,CACnBC,EAAE,CAAC,OAAO,EAAER,KAAK,CAAC,CAClBQ,EAAE,CAAC,QAAQ,EAAEP,MAAM,CAAC,CACpBO,EAAE,CAAC,eAAe,EAAEN,KAAK,CAAC,CAC1BM,EAAE,CAAC,OAAO,EAAEL,KAAK,CAAC,CAClBM,MAAM,CAAC,CAAC;IAEX,IAAIL,IAAI,IAAIA,IAAI,CAACM,SAAS,EAAE;MAC1B,OAAON,IAAI,CAACM,SAAS;IACvB;;IAEA;IACA,MAAMC,SAAS,GAAG,UAAUX,KAAK,IAAIC,MAAM,IAAIC,KAAK,WAAWC,KAAK,MAAM;IAC1E,MAAM;MAAEC,IAAI,EAAEQ;IAAY,CAAC,GAAG,MAAMd,QAAQ,CAACe,OAAO,CACjDP,IAAI,CAAC,aAAa,CAAC,CACnBQ,YAAY,CAACH,SAAS,CAAC;IAE1B,OAAOC,WAAW,CAACG,SAAS;EAC9B,CAAC,CAAC,OAAOV,KAAK,EAAE;IACdW,OAAO,CAACX,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,uBAAuB;EAChC;AACF,CAAC;;AAED;AACA,OAAO,MAAMY,uBAAuB,GAAG,MAAOC,UAAU,IAAK;EAC3D,MAAM;IAAElB,KAAK;IAAEC,MAAM;IAAEC,KAAK;IAAEC;EAAM,CAAC,GAAGe,UAAU;;EAElD;EACA,IAAIlB,KAAK,IAAIC,MAAM,IAAIC,KAAK,IAAIC,KAAK,EAAE;IACrC,OAAO,MAAMJ,eAAe,CAACC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAEC,KAAK,CAAC;EAC3D,CAAC,MAAM,IAAIH,KAAK,IAAIC,MAAM,IAAIC,KAAK,EAAE;IACnC;IACA,OAAO,MAAMH,eAAe,CAACC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAE,KAAK,CAAC;EAC3D,CAAC,MAAM,IAAIF,KAAK,IAAIC,MAAM,EAAE;IAC1B;IACA,OAAO,MAAMF,eAAe,CAACC,KAAK,EAAEC,MAAM,EAAE,OAAO,EAAE,KAAK,CAAC;EAC7D,CAAC,MAAM,IAAID,KAAK,EAAE;IAChB;IACA,OAAO,MAAMD,eAAe,CAACC,KAAK,EAAE,WAAW,EAAE,OAAO,EAAE,KAAK,CAAC;EAClE;EAEA,OAAO,uBAAuB;AAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}