{"ast":null,"code":"import{createClient}from'@supabase/supabase-js';const supabaseUrl=process.env.REACT_APP_SUPABASE_URL||'https://your-project.supabase.co';const supabaseAnonKey=process.env.REACT_APP_SUPABASE_ANON_KEY||'your-anon-key';export const supabase=createClient(supabaseUrl,supabaseAnonKey);// Ring image utilities\nexport const getRingImageUrl=async(metal,design,shape,carat)=>{try{// First try to get from database\nconst{data,error}=await supabase.from('ring_images').select('image_url').eq('metal',metal).eq('design',design).eq('diamond_shape',shape).eq('carat',carat).single();if(data&&data.image_url){return data.image_url;}// Fallback: construct path manually\nconst imagePath=\"/rings/\".concat(metal,\"/\").concat(design,\"/\").concat(shape,\"/weight-\").concat(carat,\".png\");const{data:storageData}=await supabase.storage.from('ring-images').getPublicUrl(imagePath);return storageData.publicUrl;}catch(error){console.error('Error fetching ring image:',error);return'/placeholder-ring.png';}};// Get progressive ring image (for partial selections)\nexport const getProgressiveRingImage=async selections=>{const{metal,design,shape,carat}=selections;// Try to find the best matching image based on what's selected\nif(metal&&design&&shape&&carat){return await getRingImageUrl(metal,design,shape,carat);}else if(metal&&design&&shape){// Use default carat (1.0)\nreturn await getRingImageUrl(metal,design,shape,'1.0');}else if(metal&&design){// Use default shape and carat\nreturn await getRingImageUrl(metal,design,'round','1.0');}else if(metal){// Use default design, shape, and carat\nreturn await getRingImageUrl(metal,'solitaire','round','1.0');}return'/placeholder-ring.png';};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","supabase","getRingImageUrl","metal","design","shape","carat","data","error","from","select","eq","single","image_url","imagePath","concat","storageData","storage","getPublicUrl","publicUrl","console","getProgressiveRingImage","selections"],"sources":["C:/Users/test/Desktop/FinalRingsStore/client/src/lib/supabase.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL || 'https://your-project.supabase.co';\r\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY || 'your-anon-key';\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n\r\n// Ring image utilities\r\nexport const getRingImageUrl = async (metal, design, shape, carat) => {\r\n  try {\r\n    // First try to get from database\r\n    const { data, error } = await supabase\r\n      .from('ring_images')\r\n      .select('image_url')\r\n      .eq('metal', metal)\r\n      .eq('design', design)\r\n      .eq('diamond_shape', shape)\r\n      .eq('carat', carat)\r\n      .single();\r\n\r\n    if (data && data.image_url) {\r\n      return data.image_url;\r\n    }\r\n\r\n    // Fallback: construct path manually\r\n    const imagePath = `/rings/${metal}/${design}/${shape}/weight-${carat}.png`;\r\n    const { data: storageData } = await supabase.storage\r\n      .from('ring-images')\r\n      .getPublicUrl(imagePath);\r\n\r\n    return storageData.publicUrl;\r\n  } catch (error) {\r\n    console.error('Error fetching ring image:', error);\r\n    return '/placeholder-ring.png';\r\n  }\r\n};\r\n\r\n// Get progressive ring image (for partial selections)\r\nexport const getProgressiveRingImage = async (selections) => {\r\n  const { metal, design, shape, carat } = selections;\r\n  \r\n  // Try to find the best matching image based on what's selected\r\n  if (metal && design && shape && carat) {\r\n    return await getRingImageUrl(metal, design, shape, carat);\r\n  } else if (metal && design && shape) {\r\n    // Use default carat (1.0)\r\n    return await getRingImageUrl(metal, design, shape, '1.0');\r\n  } else if (metal && design) {\r\n    // Use default shape and carat\r\n    return await getRingImageUrl(metal, design, 'round', '1.0');\r\n  } else if (metal) {\r\n    // Use default design, shape, and carat\r\n    return await getRingImageUrl(metal, 'solitaire', 'round', '1.0');\r\n  }\r\n  \r\n  return '/placeholder-ring.png';\r\n}; "],"mappings":"AAAA,OAASA,YAAY,KAAQ,uBAAuB,CAEpD,KAAM,CAAAC,WAAW,CAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,EAAI,kCAAkC,CAC5F,KAAM,CAAAC,eAAe,CAAGH,OAAO,CAACC,GAAG,CAACG,2BAA2B,EAAI,eAAe,CAElF,MAAO,MAAM,CAAAC,QAAQ,CAAGP,YAAY,CAACC,WAAW,CAAEI,eAAe,CAAC,CAElE;AACA,MAAO,MAAM,CAAAG,eAAe,CAAG,KAAAA,CAAOC,KAAK,CAAEC,MAAM,CAAEC,KAAK,CAAEC,KAAK,GAAK,CACpE,GAAI,CACF;AACA,KAAM,CAAEC,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAAP,QAAQ,CACnCQ,IAAI,CAAC,aAAa,CAAC,CACnBC,MAAM,CAAC,WAAW,CAAC,CACnBC,EAAE,CAAC,OAAO,CAAER,KAAK,CAAC,CAClBQ,EAAE,CAAC,QAAQ,CAAEP,MAAM,CAAC,CACpBO,EAAE,CAAC,eAAe,CAAEN,KAAK,CAAC,CAC1BM,EAAE,CAAC,OAAO,CAAEL,KAAK,CAAC,CAClBM,MAAM,CAAC,CAAC,CAEX,GAAIL,IAAI,EAAIA,IAAI,CAACM,SAAS,CAAE,CAC1B,MAAO,CAAAN,IAAI,CAACM,SAAS,CACvB,CAEA;AACA,KAAM,CAAAC,SAAS,WAAAC,MAAA,CAAaZ,KAAK,MAAAY,MAAA,CAAIX,MAAM,MAAAW,MAAA,CAAIV,KAAK,aAAAU,MAAA,CAAWT,KAAK,QAAM,CAC1E,KAAM,CAAEC,IAAI,CAAES,WAAY,CAAC,CAAG,KAAM,CAAAf,QAAQ,CAACgB,OAAO,CACjDR,IAAI,CAAC,aAAa,CAAC,CACnBS,YAAY,CAACJ,SAAS,CAAC,CAE1B,MAAO,CAAAE,WAAW,CAACG,SAAS,CAC9B,CAAE,MAAOX,KAAK,CAAE,CACdY,OAAO,CAACZ,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CAClD,MAAO,uBAAuB,CAChC,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAa,uBAAuB,CAAG,KAAO,CAAAC,UAAU,EAAK,CAC3D,KAAM,CAAEnB,KAAK,CAAEC,MAAM,CAAEC,KAAK,CAAEC,KAAM,CAAC,CAAGgB,UAAU,CAElD;AACA,GAAInB,KAAK,EAAIC,MAAM,EAAIC,KAAK,EAAIC,KAAK,CAAE,CACrC,MAAO,MAAM,CAAAJ,eAAe,CAACC,KAAK,CAAEC,MAAM,CAAEC,KAAK,CAAEC,KAAK,CAAC,CAC3D,CAAC,IAAM,IAAIH,KAAK,EAAIC,MAAM,EAAIC,KAAK,CAAE,CACnC;AACA,MAAO,MAAM,CAAAH,eAAe,CAACC,KAAK,CAAEC,MAAM,CAAEC,KAAK,CAAE,KAAK,CAAC,CAC3D,CAAC,IAAM,IAAIF,KAAK,EAAIC,MAAM,CAAE,CAC1B;AACA,MAAO,MAAM,CAAAF,eAAe,CAACC,KAAK,CAAEC,MAAM,CAAE,OAAO,CAAE,KAAK,CAAC,CAC7D,CAAC,IAAM,IAAID,KAAK,CAAE,CAChB;AACA,MAAO,MAAM,CAAAD,eAAe,CAACC,KAAK,CAAE,WAAW,CAAE,OAAO,CAAE,KAAK,CAAC,CAClE,CAEA,MAAO,uBAAuB,CAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}